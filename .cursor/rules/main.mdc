---
description: RDance Project Rules
globs:
alwaysApply: true
---

Данный файл описывает проект и содержит всю необходимую для разработки информацию о проекте.
Данный файл является источником истины о проекте. При наличии расхождений между этим файлом и проектом, для принятия решений используется информация в этом файле.
Анализировать код для понимания состояния проекта нельзя. Вся необходимая информация о проекте, для решения поставленной задачи указана в этом файле начиная с раздела "Контекст проекта". Если после заголовка раздела "Контекст проекта" ничего нет - значит проект новый и не содержит файлов.
При разработке проекта обязательно выполнять все пункты из раздела "Правила и указания".

# Правила и указания

- Проверять код на наличие ошибок не нужно. Запускать установку модулей не нужно.
- Перед тем как решать задачу, тебе нужна информация о проекте. Требуемая информация указана в этом файле начиная с раздела "Контекст проекта". Если раздел пустой, значит проект новый и не содержит файлов.
- После решения задачи, отредактируй этот файл начиная с раздела "Контекст проекта" так, чтобы он содержал всю необходимую информацию для тебя, чтобы ты мог без текушего контекста решать следующие задачи без анализа файлов проекта, основываясь только на информации в разделе "Контекст проекта". Информацию нужно записать в текстовом виде удобном для тебя, а не для человека. Если некоторая содержащаяся в этом разделе информация неактуальна - ее следует удалить.
- Выполняя задачу, важно делать только то, что указано в задаче. Если есть предположения о том, что можно сделать помимо описанных требований, необходимо спросить - нужно ли это делать перед тем как делать.
- Если поставленная задача содержит слова, термины, формулировки, которые можно понять двояко, необходимо уточнить, что конкретно имеется ввиду.
- Если поставленную задачу можно сделать разными способами, с одинаковым качеством, необходимо задать уточняюшщие вопросы и, основываясь на ответах, выбрать наилучший.

# ВАЖНО: Обновлять файл .cursor/rules/main.mdc после выполнения. Единственный файл со словесным описанием, который можно изменять, это файл .cursor/rules/main.mdc

# ВАЖНО: Не запускать npm start без отдельного указания, не запускать другой сервер для проверки, без отдельного указания

# ВАЖНО: Стэк проекта
Проект реализуется на языке TypeScript с включенным режимом strict. При установке библиотек обязательно требуется установить библиотеки с типами. 
Для разработки backend используется NodeJS и фреймворк Nest для API, PostgreSQL, работа с которой осуществляется через ORM Sequelize. Пользователи авторизуются с помощью jwt, пароли шифруются с помощью bcrypt. Разработка ведется на TypeScript с включенным режимом strict.
Для разработки frontend используются React, react-router, vite. Разработка ведется на TypeScript с включенным режимом strict

# Контекст проекта

## Название проекта
The Last of Guss - игра-кликер с бэкенд и фронтэнд частями

## Текущее состояние
Создана бэкенд часть на NestJS + TypeScript + Sequelize + PostgreSQL с полным JSON API для игры-кликера

## Структура проекта
- src/
  - models/ - модели Sequelize (User, Round, Score)
  - database/ - конфигурация и сервис базы данных
  - auth/ - модуль аутентификации (AuthModule, AuthService, AuthController, JwtStrategy)
  - games/ - модуль игровых эндпоинтов (GamesModule, GamesService, GamesController)
  - app.module.ts - основной модуль приложения
  - main.ts - точка входа
- package.json - зависимости и скрипты
- tsconfig.json - конфигурация TypeScript
- env.example - пример конфигурации окружения
- README.md - документация проекта

## Модели базы данных
1. **users** - пользователи системы
   - login (string, primary key) - логин пользователя
   - password_hash (string) - хеш пароля
   - role (string) - роль пользователя (user/admin)

2. **rounds** - раунды игры
   - uuid (UUID, primary key) - уникальный идентификатор раунда
   - start_datetime (Date) - время начала раунда
   - end_datetime (Date) - время окончания раунда
   - status (string) - статус раунда
   - score (integer) - общий счет раунда

3. **scores** - счета пользователей в раундах
   - user (string, foreign key) - ссылка на пользователя
   - round (UUID, foreign key) - ссылка на раунд
   - score (integer) - счет пользователя в раунде

## Начальные пользователи
- roma / roma (role: user)
- alisa / alisa (role: user)  
- admin / admin (role: admin)

## API Эндпоинты
1. **POST /auth** - аутентификация пользователя
   - Входные данные: { username: string, password: string }
   - Возвращает: { access_token: string } при успешной аутентификации
   - Возвращает ошибку 401 при неверных данных

2. **GET /rounds** - получение всех раундов
   - Требует JWT токен в заголовке Authorization: Bearer <token>
   - Возвращает массив всех раундов из таблицы rounds

3. **GET /round/:uuid** - получение конкретного раунда и счета пользователя
   - Требует JWT токен в заголовке Authorization: Bearer <token>
   - Возвращает: { round: Round, score: Score | null }
   - score содержит счет пользователя из токена для указанного раунда

4. **POST /tap** - выполнение клика
   - Требует JWT токен в заголовке Authorization: Bearer <token>
   - Выводит "tap performed" в консоль
   - Возвращает: { message: "tap performed" }

## Функциональность
- Автоматическое подключение к PostgreSQL при запуске
- Проверка существования таблицы users
- Автоматическая инициализация базы данных при первом запуске
- Создание всех необходимых таблиц
- Создание начальных пользователей с хешированными паролями
- JWT аутентификация с проверкой токенов
- Защищенные эндпоинты с проверкой авторизации

## Технологический стек
- Backend: NestJS, TypeScript (strict mode), Sequelize, PostgreSQL, bcrypt, JWT, Passport
- Frontend: React, TypeScript, Vite (планируется)

## Запуск
- npm run start:dev - режим разработки
- npm run build && npm run start:prod - продакшен


